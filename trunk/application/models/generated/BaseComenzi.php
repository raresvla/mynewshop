<?php

/**
 * BaseComenzi
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $cod_comanda
 * @property timestamp $data
 * @property integer $membru_id
 * @property float $total_fara_tva
 * @property float $total_tva
 * @property float $total_taxe
 * @property string $mod_plata
 * @property string $specificatii
 * @property enum $status
 * @property date $data_livrarii
 * @property enum $status_plata
 * @property date $data_platii
 * @property integer $new
 * @property Membri $Membri
 * @property Doctrine_Collection $Clienti
 * @property Doctrine_Collection $Facturi
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseComenzi extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('comenzi');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('cod_comanda', 'string', 15, array(
             'type' => 'string',
             'length' => 15,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('data', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('membru_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('total_fara_tva', 'float', 10, array(
             'type' => 'float',
             'length' => 10,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '0.00',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('total_tva', 'float', 10, array(
             'type' => 'float',
             'length' => 10,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '0.00',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('total_taxe', 'float', 10, array(
             'type' => 'float',
             'length' => 10,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '0.00',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('mod_plata', 'string', 25, array(
             'type' => 'string',
             'length' => 25,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('specificatii', 'string', null, array(
             'type' => 'string',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('status', 'enum', 12, array(
             'type' => 'enum',
             'length' => 12,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'confirmata',
              1 => 'neconfirmata',
              2 => 'livrata',
              3 => 'returnata',
              4 => 'anulata',
             ),
             'primary' => false,
             'default' => 'neconfirmata',
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('data_livrarii', 'date', null, array(
             'type' => 'date',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('status_plata', 'enum', 11, array(
             'type' => 'enum',
             'length' => 11,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'platita',
              1 => 'inAsteptare',
              2 => 'anulata',
             ),
             'primary' => false,
             'default' => 'inAsteptare',
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('data_platii', 'date', null, array(
             'type' => 'date',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('new', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => false,
             'autoincrement' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Membri', array(
             'local' => 'membru_id',
             'foreign' => 'id'));

        $this->hasMany('Clienti', array(
             'local' => 'id',
             'foreign' => 'comanda_id'));

        $this->hasMany('Facturi', array(
             'local' => 'id',
             'foreign' => 'comanda_id'));
    }
}